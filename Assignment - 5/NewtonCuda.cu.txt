#include <iostream>
#include <stdio.h>
#include <math.h>
#include <sys/time.h>

using namespace std;
double **hessian;
double **hessianInverse;
double *a,*b,*c,*q,*t;
double *d_a,*d_b,*d_c,*d_l,*d_u,*d_d;
int N;

// Device code
__global__ void ThomasAlgorithmLU(int N, double *b, double *a, double *c, double *l, double *u, double *d){

    int i = blockDim.x * blockIdx.x + threadIdx.x;


    d[0] = a[0];
    u[0] = c[0];
    if(i< N-2){
     l[i] = b[i]/d[i];
     d[i+1] = a[i+1] - l[i]*u[i];
     u[i+1] = c[i+1];
    }

    l[N-2] = b[N-2]/d[N-2];
    d[N-1] = a[N-1] - l[N-2]*u[N-2];

    return;
 }

double*  ThomasAlgorithmSolve(int N, double *l, double *u, double *d, double *t, double *q){
 int i;
 double *y = new double[N];

y[0] = q[0];
 for(i=1;i<N;i++)
 y[i] = q[i] - l[i-1]*y[i-1];

 t[N-1] = y[N-1]/d[N-1];
 for(i=N-2;i>=0;i--)
 t[i] = (y[i] - u[i]*t[i+1])/d[i];



 delete[] y;
 return t;
 }



double* ThomasAlgorithm(int N, double *b, double *a, double *c, double *t, double *q){
 double *l,*u,*d;
    int i;
 int size =(int) N * sizeof(double);

 l = new double[N];
 u = new double[N];
 d = new double[N];

    for(i=0;i<N;i++)
    {
        l[i] = 0;
    }
    for(i=0;i<N;i++)
    {
        u[i] = 0;
    }
    for(i=0;i<N;i++)
    {
        d[i] = 0;
    }

 // Alloc space for device copies
    cudaMalloc((void **)&d_a, size);
    cudaMalloc((void **)&d_b, size);
    cudaMalloc((void **)&d_c, size);
    cudaMalloc((void **)&d_l, size);
    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_d, size);

    // Copy inputs to device
    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_l, l, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_d, d, size, cudaMemcpyHostToDevice);

    //Invoke kernel
    int threadsPerBlock = 2;
    int blocksPerGrid = (N + threadsPerBlock -1)/ threadsPerBlock;

    //Invoke Kernel
    ThomasAlgorithmLU<<<blocksPerGrid,threadsPerBlock>>>(N,b,a,c,l,u,d);


    // Copy result back to host
    cudaMemcpy(l, d_l, size, cudaMemcpyDeviceToHost);
    cudaMemcpy(d, d_d, size, cudaMemcpyDeviceToHost);
    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

   printf("Printing the values of lower triangle in function");
   for(i=0;i<N;i++)
   {
        printf("%f\n",l[i]);
   }
   printf("Printing the values of upper triangle in function");
   for(i=0;i<N;i++)
   {
        printf("%f\n",u[i]);
   }

   printf("Printing the values of diagonal in function");
for(i=0;i<N;i++)
   {
        printf("%f\n",d[i]);
   }
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
    cudaFree(d_l);
    cudaFree(d_u);
    cudaFree(d_d);

    t= ThomasAlgorithmSolve(N,l,u,d,t,q);

    delete[] l;
    delete[] u;
    delete[] d;

    return t;
 }


int main(int argc, const char * argv[])
{
    int n=3;
    N = n+1;
    struct timeval start, stop;
    gettimeofday(&start, NULL);
    a = new double[N];
    b = new double[N];
    c = new double[N];
    q = new double[N];
    t = new double[N];

    int i,j,k;
    hessian= new double*[n+1];
    for (int i=0; i < n+1; i++)
        hessian[i] = new double[n+1];
    double f[n+1][n+1];
    double fn[n+1];
    double x[4]= {1,2,3,4};
    double xnew[N];
    double xdiff[N];
    double gradient[n+1];
    for(k=0;k<n;k++)
    {
    for (i=0;i<n;i++)
    {
        if(i==0)
        {
            fn[i]= (100 * ((x[i]*x[i])- x[i+1]) * ((x[i]*x[i])- x[i+1]))+ ((x[i]-1) * (x[i]-1));
        }
        else
        {
            fn[i] = fn[i-1] + (100 * ((x[i]*x[i])- x[i+1]) * ((x[i]*x[i])- x[i+1]))+ ((x[i]-1) * (x[i]-1));
        }
    }
    for(i=0;i<=n;i++)
    {
        for(j=0;j<=n;j++)
        {
            if(i==0 && j==0)
            {
                f[i][j] = (800 * x[0]*x[0])+ (400 * ((x[0]*x[0])-x[1]))+2;
            }
            else if(i== n && j== n)
            {
                f[i][j] = 200;
            }
            else if (i==j && i!=n)
            {
                f[i][j] = (400 *((x[i]*x[i])-x[i+1]))+ (800* x[i]*x[i])+202;
            }
            else if (j== (i-1)|| j == (i+1))
            {
                f[i][j] = -400 * x[i];
            }
            else{
                f[i][j] = 0;
            }
        }
    }
    for(i=0;i<=n;i++)
    {
       if(i==0)
        {
            gradient[0] = (400 * x[0] * ((x[0] * x[0])-x[1])) + (2* (x[0] -1 ));
        }
        else if (i== n)
        {
            gradient[n] = (-200 * (( x[n-1] * x[n-1])- x[n]));
        }
        else if ( i < n)
        {
            gradient[i] = (-200 * ((x[i-1] * x[i-1]) - x[i])) + ( 400 * x[i] * (( x[i] * x[i])-x[i+1])) + ( 2* (x[i] - 1));
        }
    }
    printf("Printing the gradient vector \n");
    for (i=0; i<=n;i++)
    {
        printf("%f\n",gradient[i]);
    }
    printf("Printing the HessianMatrix\n");
    for(i=0; i<=n; i++)
    {
        for(j=0;j<=n;j++)
        {
            hessian[i][j] = f[i][j];
            printf("%f\t",hessian[i][j]);
        }
        printf("\n");
    }
    for(i=0; i <= n; i++)
    {
        j=i;
        a[i]= hessian[i][j];

    }
    printf("Printing the diagonal vector");
    for(i=0;i<=n;i++)
    {
        printf("%f\n",a[i]);
    }
    b[0]=0;
    for(i=1; i <= n; i++)
    {   j= i-1;
        b[i]= hessian[i][j];

    }
    printf("Printing the lower diagonal vector");
    for(i=0;i<=n;i++)
    {
        printf("%f\n",b[i]);
    }
    for(i=0; i < n; i++)
    {   j= i+1;
        c[i]= hessian[i][j];

    }
    c[n]=0;
    printf("Printing the upper diagonal vector");
    for(i=0;i<=n;i++)
    {
        printf("%f\n",c[i]);
    }
    for(i=0;i<=n;i++)
    {
        q[i] = - gradient[i];
    }
    printf("Printing the right hand side vector");
    for(i=0;i<=n;i++)
    {
        printf("%f\n",q[i]);
    }
    for(i=0;i<=n;i++)
    {
        t[i] = 0;
    }


     for(i=0; i<=n;i++)
     {
     printf("%f\n",t[i]);
     }

     t= ThomasAlgorithm(N,b,a,c,t,q);

     printf("Printing the newton step");
     for(i=0; i<=n;i++)
     {
     printf("%f\n",t[i]);
     }

     //update Solution
     for(i=0;i<N;i++)
     {
        xnew[i] = x[i]+t[i];
     }
     for(i=0;i<N;i++)
     {
        xdiff[i] = xnew[i]-x[i];
     }
     for(i=0;i<N;i++)
     {
        x[i] = xnew[i];
     }
     //Calculating norms
     double square1 = 0, nomsValue1 = 0;
     for(int i=0; i <= 1; i++){
        square1 = square1 + (xdiff[i] * xdiff[i]);
     }
     nomsValue1 = sqrt (square1);
     printf("\nVector Noms: %.2f\n", nomsValue1);

     if(nomsValue1 <= 0){
       break;
     }

    // Cleanup
    free(a);
    free(b);
    free(c);
    free(q);
    free(t);
    }
    gettimeofday(&stop, NULL);
    printf("\n\nTime Taken (in microseconds):  %lu\n", stop.tv_usec - start.tv_usec);
    return 0;

}
